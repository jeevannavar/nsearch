#pragma once

#include "../Sequence.h"

struct Protein {
  typedef char CharType;
};

// Based on BLOSUM62
// Collapse AAs into 4 bits
template <>
struct BitMapPolicy< Protein > {
  static const size_t NumBits = 4;

  inline static int8_t BitMap( const char aa ) {
    static const char BitMapping[] =
    { 0b0000, // 'A'
      0b0010, // 'B'  (same as N)
      0b0011, // 'C'
      0b0100, // 'D'  (same as E)
      0b0100, // 'E'
      0b1111, // 'F'  (same as Y)
      0b0101, // 'G'
      0b0110, // 'H'
      0b0111, // 'I'
      0b0111, // 'J'  (same as I)
      0b1001, // 'K'
      0b1000, // 'L'
      0b1010, // 'M'
      0b0010, // 'N'
      0b0000, // 'O'
      0b1011, // 'P'
      0b0100, // 'Q'  (same as E)
      0b0001, // 'R'
      0b1100, // 'S'
      0b1101, // 'T'
      0b0000, // 'U'
      0b0111, // 'V'  (same as I)
      0b1110, // 'W'
      0b0000, // 'X'  (same as A)
      0b1111, // 'Y'
      0b0100, // 'Z'  (same as E)
    };

    if( aa == 'X' ) return -1;

    return BitMapping[ aa - 'A' ];
  }
};

/* template <> */
/* struct ComparePolicy< Protein > { */
/*   inline static bool Match( const char nucA, const char nucB ) { */
/*     return Score( nucA, nucB ) > 0; */
/*   } */

/*   inline static int8_t Score( const char nucA, const char nucB ) { */
/*     static const int MatchMatrixSize = 26; // 'A'...'Z', waste some space for faster lookup */
/*     static const int8_t MatchMatrix[ MatchMatrixSize ][ MatchMatrixSize ] = { */
/*       {  1, -1, -1,  1,  0,  0, -1,  1,  0,  0, -1,  0,  1,  1,  0,  0,  0,  1, -1, -1, -1,  1,  1,  0, -1,  0 }, */
/*       { -1,  1,  1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       { -1,  1,  1, -1,  0,  0, -1,  1,  0,  0, -1,  0,  1,  1,  0,  0,  0, -1,  1, -1, -1,  1, -1,  0,  1,  0 }, */
/*       {  1,  1, -1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       { -1,  1, -1,  1,  0,  0,  1, -1,  0,  0,  1,  0, -1,  1,  0,  0,  0,  1,  1, -1, -1,  1, -1,  0, -1,  0 }, */
/*       {  1,  1,  1,  1,  0,  0, -1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       { -1,  1, -1,  1,  0,  0,  1,  1,  0,  0,  1,  0, -1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  1,  1,  1,  1,  0,  0, -1,  1,  0,  0, -1,  0,  1,  1,  0,  0,  0,  1,  1, -1, -1,  1,  1,  0,  1,  0 }, */
/*       {  1,  1,  1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       {  1,  1, -1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1, -1, -1,  1,  1,  0, -1,  0 }, */
/*       { -1,  1,  1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1, -1, -1,  1, -1,  0,  1,  0 }, */
/*       { -1,  1, -1,  1,  0,  0, -1,  1,  0,  0,  1,  0, -1,  1,  0,  0,  0, -1, -1,  1,  1, -1,  1,  0,  1,  0 }, */
/*       { -1,  1, -1,  1,  0,  0, -1,  1,  0,  0,  1,  0, -1,  1,  0,  0,  0, -1, -1,  1,  1, -1,  1,  0,  1,  0 }, */
/*       {  1,  1,  1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1,  1, -1, -1,  1,  1,  0,  1,  0 }, */
/*       {  1,  1, -1,  1,  0,  0, -1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  1, -1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, */
/*       { -1,  1,  1,  1,  0,  0, -1,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0, -1,  1,  1,  1,  1,  1,  0,  1,  0 }, */
/*       {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 } */
/*     }; */

/*     return MatchMatrix[ nucA ][ nucB ]; */
/*   } */
/* }; */
