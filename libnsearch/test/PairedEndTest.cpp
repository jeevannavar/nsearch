#include <catch.hpp>

#include <nsearch/FASTQ/Writer.h>
#include <nsearch/PairedEnd/Merger.h>
#include <nsearch/PairedEnd/Reader.h>

using namespace PairedEnd;

TEST_CASE( "Merger" ) {
  bool     res;
  Sequence merged;

  SECTION( "non-staggered overlap" ) {
    Merger   merger( 5, 1.0 );
    Sequence fwd1 = Sequence( "fwd1", "ACTGGATGGA", "JJJJJJJJJJ" );
    Sequence rev1 =
      Sequence( "rev1", "ATGGAATCCC", "JJJJJJJJJJ" ).ReverseComplement();

    res = merger.Merge( fwd1, rev1, &merged );
    REQUIRE( res == true );
    REQUIRE( merged == Sequence( "ACTGGATGGAATCCC" ) );
  }

  SECTION( "staggered overlap (merged sequence is trimmed)" ) {
    Merger   merger( 5, 1.0 );
    Sequence fwd1 = Sequence( "fwd1", "ATCCCGGA", "JJJJJJJJ" );
    Sequence rev1 =
      Sequence( "rev1", "ATGGAATCCC", "JJJJJJJJJJ" ).ReverseComplement();

    res = merger.Merge( fwd1, rev1, &merged );
    REQUIRE( res == true );
    REQUIRE( merged == Sequence( "ATCCC" ) );
  }

  SECTION( "min bases requirement" ) {
    Merger merger( 6, 0.8 );

    Sequence fwd1 = Sequence( "fwd1", "ACTGGATGGA", "JJJJJJJJJJ" );
    Sequence rev1 =
      Sequence( "rev1", "ATGGAATCCC", "JJJJJJJJJJ" ).ReverseComplement();

    res = merger.Merge( fwd1, rev1, &merged );
    REQUIRE( res == false );
  }

  SECTION( "min identity requirement" ) {
    Merger merger( 5, 1.0 );

    Sequence fwd1 = Sequence( "fwd1", "ACTGGATGGA", "JJJJJJJJJJ" );
    Sequence rev1 =
      Sequence( "rev1", "GATAGAATCCC", "JJJJJJJJJJJ" ).ReverseComplement();

    res = merger.Merge( fwd1, rev1, &merged );
    REQUIRE( res == false );
  }

  SECTION( "posterior Q calculation" ) {
    Merger   merger( 3, 1.0 );
    Sequence fwd1 = Sequence( "fwd1", "ATTGACCGT", "1>AA1@FFF" );
    Sequence rev1 =
      Sequence( "rev1", "ACCGTGAATC", "?AAAAFFFFF" ).ReverseComplement();

    res = merger.Merge( fwd1, rev1, &merged );
    REQUIRE( res == true );
    REQUIRE( merged.sequence == "ATTGACCGTGAATC" );
    REQUIRE( merged.quality == "1>AAJJJJJFFFFF" );
  }
}

TEST_CASE( "Integration" ) {
  // - Nonstaggered
  // - Staggered
  // - No alignment
  const char* forwardReadsContent =
    R"(@MISEQ:1:1101:14454:2872#ATATCGTATCTTTCCC/1
CATTAGGGTTAGCCTCGGTACGGTCAGGCATCCACGGCGCTTTAAAATAGATGTTATAGATATTCAAATAACCCTGAAACAAATGCTTAGGGATTTTATTGGTATCAGGGTTAATCGTGCCAAGAAAAGCGGCATGGTCAATATAACCAGTAGTGTTAACAGTCGGGAGAGGAGTGGCATTAACACCATCCTTCATGAACTTAATCCACTGTTCACCATAAACGTGACGATGAGGGACATAAAAAGTAAA
+MISEQ:1:1101:14454:2872#ATATCGTATCTTTCCC/1
1>AA1@FFFF@1BGBGGGEFE?EFEAG0FGGHGFHFGGGGGGGHEHGHHH1DGFGHHHHHHHHHHHHHFHHHHHHHHHHHHHHHHHHFHHHHHHFHHHHHHF1FFHHHHHGGHHHHGHH/FFCGHHHHHHGGGCG0GGFHHHHFHHGFEAFFBFFHHHHGGHHHG?CCGGCCGCHFEGHHHHHHHHGHHHHFHHHHGHHHHGGGGGGFFGGGGGGGFGGGEGGGAEFG?EFEFFFFFFFFFBFFFB9BFF

@MISEQ:1:1101:16050:2871#TTGCTCGTTCTTTCCC/1
CGATGGACGGCGAGGGTCTGGATCATGACCCATTTGGAGAAGATGCGGTCCTTGGAGAACTTGTTGCCGGACATGAAATTCTTGCCATCGGCTTCCTTGGTTTCGCCCATCGAGGCGTAGCTGTGGCCCGGCTGATAGTGCAAGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGTTGCTCGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAGGTAGTTGTTGTTTTATTTCGCTGC
+MISEQ:1:1101:16050:2871#TTGCTCGTTCTTTCCC/1
>AA>A3BF?DB>2A2E2FCFBF5GFEGFHHHHHFHFHCBCCGHHHHCCAEEHGD3BGGGGEGGFHHHHGGGGGHGHFGFHHHHHHHFHHGGG/EFHHHHHBGGHGGGGGHHGGGGGG?CGGHGHC0GHHCGGGGFGGH=GFFHHHHHGGGGG.GHG@9AEGGGFGGGGFBFGGGGGGFBDDAFFBA9.:/9/;FEDBF/FBF<FEFEFFFFF?FFFF?################################

@MISEQ:1:1101:11693:2867#CGAAGTTCAACCAAAA/1
CATGGAGTTTGATCATGGCTCAGAGTGAACGCTGGCGGCGTGCCTAATACATGCAAGTCGAACGGAATTTAAAAGAGCTTGCTCTTTTAAATTTAGTGGCGCACGGGTGAGTAATATATAGCTAATCTGCCCCTTGCTGGAGGACAACAGTTAGAAATGACTGCTAATACTCCATACTCCTTTTTACCATAAGATAAATCGGGAAAGAATTTCGGCAAGGGATGAGACTATATCGTATCAGCTAGTCGGG
+MISEQ:1:1101:11693:2867#CGAAGTTCAACCAAAA/1
3A333FFBBFFFGGGGGFAGGFFFFFGEFGFG2A?EGGGAAAEHHFFDGGDFFHHHGFHEEGHGGGGGGHGHGHGGFGFHHHHHGFHHGGHFHHHGHHHGGGEGGGG>BGHHGHFFFHHHHHHHGFHHFFHHGEGHGHGHHGGGHHHGHHHHHHHHHBGHFFHGHHHFDGBDGHHHHGHHHBFBGCGHHEHGFGGGEFFG.;AB@GGGGGBBF/;?BBEFFFF?/BFFFFFFFBEFFFFFFFFFF/FDB#
)";

  const char* reverseReadsContent =
    R"(@MISEQ:1:1101:14454:2872#ATATCGTATCTTTCCC/2
TTTCTCCATTGCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTTTATGTCCCTCATCGTCACGTTTATGGTGAACAGTGGATTAAGTTCATGAAGGATGGTGTTAATGCCACTCCTCTCCCGACTGTTAACACTACTGGTTATATTGACCATGCCGCTTTTCTTGGCACGATTAACCCTGATACCAATAAAATCCCTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTA
+MISEQ:1:1101:14454:2872#ATATCGTATCTTTCCC/2
?AAAAFFFFFFFFGGGCEFGGCCHGHHFDFHHGHGHHHBGDEDFGHHHHHHHHGHGFHHHHHGHHHHHHHFHEGGFHFHHHFFHGHHHGHFHFFHEFHHHHHHH4DFHFHHGGGHCHGHHFHHH3GFHGHFFFGGFGGGFFGHHHGGGHHHHHHHHHHF2F2<2@GGCCGGEHFGHGHBHFD.FGGHGFCFG/G0GGH0<0GGHHF/CGFCGFHHHBC0CHFCF:CGGGFBFGG0BBFGGBFGEBBFGB#

@MISEQ:1:1101:16050:2871#TTGCTCGTTCTTTCCC/2
TGCACTATCAGCCGGGCCACAGCTACGCCTCGATGGGCGAAACCAAGGAAGCCGATGGCAAGAATTTCATGTCCGGCAACAAGTTCTCCAAGGACCGCATCTTCTCCAAATGGGTCATGATCCAGACCCTCGCCGTCCATCGAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCGGGGTTATTCATACCAACGTGGAGACACAGAGTGACAATACCGGCGCACATAACCAACC
+MISEQ:1:1101:16050:2871#TTGCTCGTTCTTTCCC/2
>>AA>FCDFDFFGGGGGGGGFGHBFGEFGHGAAHFGFHGGGGCGHGHGHHGHGG@@EGHHHGHHHHFHHHHHHHGGCFGHGFGGHGHHHHHHGCHGEFGFFGHHHHHHHHFHHHFHHHHHBGFHHHGEEHGCGGGGGGGHHGFGHEHFDCEDGHHGC??@DEBFFACC;FF/99;990;0;09.;9EC;?############################################################

@MISEQ:1:1101:11693:2867#CGAAGTTCAACCAAAA/2
GCGGCTGCTGGCACGGAGTTAGCCGGTGCTTATTCGTTAGGTACCGTCATTATTCTTCCCTAACAAAAGGAGTTTACGCTCCGAAAAGTGTCATCCTCCACGCGGCGTTGCTGCGTCAGGGTTTCCCCCATTGCGCAATATTCCCTACTGCTGCCTCCCGTAGGAGTTTGGACCGTGTCTCAGTTCCAATGTGACTGATCATCCTCTCAGACCAGTTACGCGTCATAGCCTCGGTAGGCCGTTACCCCAC
+MISEQ:1:1101:11693:2867#CGAAGTTCAACCAAAA/2
ABAAB@DBFFFBGGGGGGAGBFGHGGEGGBGHHHGHHHHGFGGGDFGGGHHGHHHHHHHHHFHGFFHHHGHFB3FGGFCEEEGFDGG3@B@FGGGHGHHHHGGGGGGBCCF22DGADDGFH0?EFGHHGGHHHGGGGGDHGBHHHFFHHHHBGFFHHGGGHGDBGFCFFGGFFFFDEFFFGGGFBFFGFBFGGGFFFFBFFFEBFFFBBF/BEBFFFFBEDFB@D.FBBFBFD?AE.:B9BDDFAB/ADA
)";

  std::istringstream issfwd( forwardReadsContent );
  std::istringstream issrev( reverseReadsContent );
  std::ostringstream os;

  Reader reader( issfwd, issrev );
  Merger merger;

  FASTQ::Writer writer( os );
  Sequence      fwd, rev;

  while( reader.Read( &fwd, &rev ) ) {
    Sequence merged;

    if( merger.Merge( fwd, rev, &merged ) ) {
      writer << merged;
    }
  }

  // usearch output for nonstaggered
  const char* expectedOutput = R"(@MISEQ:1:1101:14454:2872#ATATCGTATCTTTCCC/1
CATTAGGGTTAGCCTCGGTACGGTCAGGCATCCACGGCGCTTTAAAATAGTTGTTATAGATATTCAAATAACCCTGAAACAAATGCTTAGGGATTTTATTGGTATCAGGGTTAATCGTGCCAAGAAAAGCGGCATGGTCAATATAACCAGTAGTGTTAACAGTCGGGAGAGGAGTGGCATTAACACCATCCTTCATGAACTTAATCCACTGTTCACCATAAACGTGACGATGAGGGACATAAAAAGTAAAAATGTCTACAGTAGAGTCAATAGCAAGGCCACGACGCAATGGAGAAA
+
1>AA1@FFFF@1BGBGGGEFE?EFEAG0FGGHGFHFGGGGGGGHEHGJJJ6JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJEJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJHHGFDEDGBHHHGHGHHFDFHHGHCCGGFECGGGFFFFFFFFAAAA?
@MISEQ:1:1101:16050:2871#TTGCTCGTTCTTTCCC/1
CGATGGACGGCGAGGGTCTGGATCATGACCCATTTGGAGAAGATGCGGTCCTTGGAGAACTTGTTGCCGGACATGAAATTCTTGCCATCGGCTTCCTTGGTTTCGCCCATCGAGGCGTAGCTGTGGCCCGGCTGATAGTGCA
+
JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
)";

  REQUIRE( os.str() == expectedOutput );
}
